from django.db import models


class Pokedex(models.Model):
    index = models.CharField(primary_key=True, max_length=50)
    num = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=50, blank=True, null=True)
    types = models.JSONField(blank=True, null=True)
    genderratio = models.JSONField(blank=True, null=True)
    basestats = models.JSONField(blank=True, null=True)
    abilities = models.JSONField(blank=True, null=True)
    heightm = models.FloatField(blank=True, null=True)
    weightkg = models.FloatField(blank=True, null=True)
    color = models.CharField(max_length=50, blank=True, null=True)
    evos = models.JSONField(blank=True, null=True)
    egggroups = models.JSONField(blank=True, null=True)
    tier = models.CharField(max_length=50, blank=True, null=True)
    prevo = models.CharField(max_length=50, blank=True, null=True)
    evolevel = models.FloatField(blank=True, null=True)
    otherformes = models.JSONField(blank=True, null=True)
    formeorder = models.JSONField(blank=True, null=True)
    cangigantamax = models.CharField(max_length=50, blank=True, null=True)
    basespecies = models.CharField(max_length=50, blank=True, null=True)
    forme = models.CharField(max_length=50, blank=True, null=True)
    requireditem = models.CharField(max_length=50, blank=True, null=True)
    isnonstandard = models.CharField(max_length=50, blank=True, null=True)
    changesfrom = models.CharField(max_length=50, blank=True, null=True)
    evocondition = models.CharField(max_length=50, blank=True, null=True)
    evotype = models.CharField(max_length=50, blank=True, null=True)
    gender = models.CharField(max_length=50, blank=True, null=True)
    gen = models.FloatField(blank=True, null=True)
    evoitem = models.CharField(max_length=50, blank=True, null=True)
    canhatch = models.BooleanField(blank=True, null=True)
    evomove = models.CharField(max_length=50, blank=True, null=True)
    tags = models.JSONField(blank=True, null=True)
    baseforme = models.CharField(max_length=50, blank=True, null=True)
    cosmeticformes = models.JSONField(blank=True, null=True)
    maxhp = models.FloatField(blank=True, null=True)
    requiredability = models.CharField(max_length=50, blank=True, null=True)
    battleonly = models.JSONField(blank=True, null=True)
    requiredmove = models.CharField(max_length=50, blank=True, null=True)
    requireditems = models.JSONField(blank=True, null=True)
    cannotdynamax = models.BooleanField(blank=True, null=True)
    formtuple = models.JSONField(blank=True, null=True)
    nameko = models.CharField(max_length=50, blank=True, null=True)
    namenouthuca = models.CharField(max_length=50, blank=True, null=True)
    nameliberty = models.CharField(max_length=50, blank=True, null=True)
    iconfilename = models.CharField(max_length=50, blank=True, null=True)
    learnset = models.JSONField(blank=True, null=True)
    eventdata = models.JSONField(blank=True, null=True)
    encounters = models.JSONField(blank=True, null=True)
    eventonly = models.JSONField(blank=True, null=True)

    class Meta:
        db_table = 'pokedex'

    def __str__(self):
        return self.name


class Abilities(models.Model):
    index = models.CharField(primary_key=True, max_length=50)
    isnonstandard = models.CharField(max_length=50, blank=True, null=True)
    name = models.CharField(max_length=50, blank=True, null=True)
    rating = models.FloatField(blank=True, null=True)
    num = models.IntegerField(blank=True, null=True)
    desc = models.CharField(max_length=50, blank=True, null=True)
    shortdesc = models.CharField(max_length=50, blank=True, null=True)
    onmodifytypepriority = models.FloatField(blank=True, null=True)
    onbasepowerpriority = models.FloatField(blank=True, null=True)
    ondamaginghitorder = models.FloatField(blank=True, null=True)
    suppressweather = models.BooleanField(blank=True, null=True)
    isbreakable = models.BooleanField(blank=True, null=True)
    ispermanent = models.BooleanField(blank=True, null=True)
    onresidualorder = models.FloatField(blank=True, null=True)
    onresidualsuborder = models.FloatField(blank=True, null=True)
    onallybasepowerpriority = models.FloatField(blank=True, null=True)
    oncriticalhit = models.BooleanField(blank=True, null=True)
    onmodifymovepriority = models.FloatField(blank=True, null=True)
    onmodifyatkpriority = models.FloatField(blank=True, null=True)
    onmodifyspapriority = models.FloatField(blank=True, null=True)
    onsourcemodifyaccuracypriority = models.FloatField(blank=True, null=True)
    onanybasepowerpriority = models.FloatField(blank=True, null=True)
    ondamagepriority = models.FloatField(blank=True, null=True)
    onsourcebasepowerpriority = models.FloatField(blank=True, null=True)
    condition = models.JSONField(blank=True, null=True)
    onallymodifyatkpriority = models.FloatField(blank=True, null=True)
    onallymodifyspdpriority = models.FloatField(blank=True, null=True)
    onmodifydefpriority = models.FloatField(blank=True, null=True)
    onmodifyweightpriority = models.FloatField(blank=True, null=True)
    ontryhitpriority = models.FloatField(blank=True, null=True)
    onanyinvulnerabilitypriority = models.FloatField(blank=True, null=True)
    onfractionalprioritypriority = models.FloatField(blank=True, null=True)
    onsourcemodifydamagepriority = models.FloatField(blank=True, null=True)
    ontryeatitempriority = models.FloatField(blank=True, null=True)
    onmodifyaccuracypriority = models.FloatField(blank=True, null=True)
    onanyfaintpriority = models.FloatField(blank=True, null=True)
    onfractionalpriority = models.FloatField(blank=True, null=True)
    ondragoutpriority = models.FloatField(blank=True, null=True)
    onsourcemodifyatkpriority = models.FloatField(blank=True, null=True)
    onsourcemodifyspapriority = models.FloatField(blank=True, null=True)
    onbeforemovepriority = models.FloatField(blank=True, null=True)
    onanymodifyaccuracypriority = models.FloatField(blank=True, null=True)
    nameko = models.CharField(max_length=50, blank=True, null=True)
    namejp = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        db_table = 'abilities'

    def __str__(self):
        return self.name


class Items(models.Model):
    index = models.CharField(primary_key=True, max_length=50)
    name = models.CharField(max_length=50, blank=True, null=True)
    spritenum = models.IntegerField(blank=True, null=True)
    megastone = models.CharField(max_length=50, blank=True, null=True)
    megaevolves = models.CharField(max_length=50, blank=True, null=True)
    itemuser = models.JSONField(blank=True, null=True)
    num = models.IntegerField(blank=True, null=True)
    gen = models.IntegerField(blank=True, null=True)
    isnonstandard = models.CharField(max_length=50, blank=True, null=True)
    desc = models.CharField(max_length=50, blank=True, null=True)
    fling = models.JSONField(blank=True, null=True)
    boosts = models.JSONField(blank=True, null=True)
    onbasepowerpriority = models.FloatField(blank=True, null=True)
    onboostpriority = models.FloatField(blank=True, null=True)
    isberry = models.BooleanField(blank=True, null=True)
    naturalgift = models.JSONField(blank=True, null=True)
    ontakeitem = models.BooleanField(blank=True, null=True)
    zmove = models.CharField(max_length=50, blank=True, null=True)
    zmovefrom = models.CharField(max_length=50, blank=True, null=True)
    onmodifyspdpriority = models.FloatField(blank=True, null=True)
    ispokeball = models.BooleanField(blank=True, null=True)
    oneat = models.BooleanField(blank=True, null=True)
    ontryhealpriority = models.FloatField(blank=True, null=True)
    onresidualorder = models.FloatField(blank=True, null=True)
    onresidualsuborder = models.FloatField(blank=True, null=True)
    onmodifyaccuracypriority = models.FloatField(blank=True, null=True)
    isgem = models.BooleanField(blank=True, null=True)
    onmemory = models.CharField(max_length=50, blank=True, null=True)
    forcedforme = models.CharField(max_length=50, blank=True, null=True)
    onplate = models.CharField(max_length=50, blank=True, null=True)
    zmovetype = models.CharField(max_length=50, blank=True, null=True)
    ondrive = models.CharField(max_length=50, blank=True, null=True)
    onmodifyatkpriority = models.FloatField(blank=True, null=True)
    ischoice = models.BooleanField(blank=True, null=True)
    onmodifyspapriority = models.FloatField(blank=True, null=True)
    onfractionalprioritypriority = models.FloatField(blank=True, null=True)
    shortdesc = models.CharField(max_length=50, blank=True, null=True)
    onattractpriority = models.FloatField(blank=True, null=True)
    onaftermovesecondarypriority = models.FloatField(blank=True, null=True)
    onmodifydefpriority = models.FloatField(blank=True, null=True)
    ondamagepriority = models.FloatField(blank=True, null=True)
    onfractionalpriority = models.FloatField(blank=True, null=True)
    onmodifymovepriority = models.FloatField(blank=True, null=True)
    onaftersetstatuspriority = models.FloatField(blank=True, null=True)
    ignoreklutz = models.BooleanField(blank=True, null=True)
    condition = models.JSONField(blank=True, null=True)
    onnegateimmunity = models.BooleanField(blank=True, null=True)
    ondamaginghitorder = models.FloatField(blank=True, null=True)
    ontrappokemonpriority = models.FloatField(blank=True, null=True)
    onaftermovesecondaryselfpriority = models.FloatField(blank=True, null=True)
    onsourcemodifyaccuracypriority = models.FloatField(blank=True, null=True)
    nameko = models.CharField(max_length=50, blank=True, null=True)
    namejp = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        db_table = 'items'

    def __str__(self):
        return self.name


class Moves(models.Model):
    index = models.CharField(primary_key=True, max_length=50)
    num = models.IntegerField(blank=True, null=True)
    accuracy = models.IntegerField(blank=True, null=True)
    basepower = models.IntegerField(blank=True, null=True)
    category = models.CharField(max_length=50, blank=True, null=True)
    isnonstandard = models.CharField(max_length=50, blank=True, null=True)
    name = models.CharField(max_length=50, blank=True, null=True)
    pp = models.IntegerField(blank=True, null=True)
    priority = models.IntegerField(blank=True, null=True)
    flags = models.JSONField(blank=True, null=True)
    isz = models.CharField(max_length=50, blank=True, null=True)
    critratio = models.FloatField(blank=True, null=True)
    secondary = models.JSONField(blank=True, null=True)
    target = models.CharField(max_length=50, blank=True, null=True)
    type = models.CharField(max_length=50, blank=True, null=True)
    contesttype = models.CharField(max_length=50, blank=True, null=True)
    desc = models.CharField(max_length=50, blank=True, null=True)
    shortdesc = models.CharField(max_length=50, blank=True, null=True)
    drain = models.JSONField(blank=True, null=True)
    boosts = models.JSONField(blank=True, null=True)
    zmove = models.JSONField(blank=True, null=True)
    volatilestatus = models.CharField(max_length=50, blank=True, null=True)
    condition = models.JSONField(blank=True, null=True)
    multihit = models.JSONField(blank=True, null=True)
    sidecondition = models.CharField(max_length=50, blank=True, null=True)
    self = models.JSONField(blank=True, null=True)
    stallingmove = models.BooleanField(blank=True, null=True)
    selfswitch = models.JSONField(blank=True, null=True)
    ignoreimmunity = models.JSONField(blank=True, null=True)
    overrideoffensivestat = models.CharField(max_length=50, blank=True, null=True)
    maxmove = models.JSONField(blank=True, null=True)
    recoil = models.JSONField(blank=True, null=True)
    nosketch = models.BooleanField(blank=True, null=True)
    ignoredefensive = models.BooleanField(blank=True, null=True)
    ignoreevasion = models.BooleanField(blank=True, null=True)
    forceswitch = models.BooleanField(blank=True, null=True)
    selfboost = models.JSONField(blank=True, null=True)
    nonghosttarget = models.CharField(max_length=50, blank=True, null=True)
    status = models.CharField(max_length=50, blank=True, null=True)
    isfuturemove = models.BooleanField(blank=True, null=True)
    smarttarget = models.BooleanField(blank=True, null=True)
    damage = models.JSONField(blank=True, null=True)
    terrain = models.CharField(max_length=50, blank=True, null=True)
    selfdestruct = models.CharField(max_length=50, blank=True, null=True)
    pseudoweather = models.CharField(max_length=50, blank=True, null=True)
    ondamagepriority = models.FloatField(blank=True, null=True)
    breaksprotect = models.BooleanField(blank=True, null=True)
    secondaries = models.JSONField(blank=True, null=True)
    ohko = models.JSONField(blank=True, null=True)
    overrideoffensivepokemon = models.CharField(max_length=50, blank=True, null=True)
    willcrit = models.BooleanField(blank=True, null=True)
    ismax = models.JSONField(blank=True, null=True)
    ignoreability = models.BooleanField(blank=True, null=True)
    weather = models.CharField(max_length=50, blank=True, null=True)
    slotcondition = models.CharField(max_length=50, blank=True, null=True)
    heal = models.JSONField(blank=True, null=True)
    realmove = models.CharField(max_length=50, blank=True, null=True)
    hascrashdamage = models.BooleanField(blank=True, null=True)
    pressuretarget = models.CharField(max_length=50, blank=True, null=True)
    nometronome = models.JSONField(blank=True, null=True)
    mindblownrecoil = models.BooleanField(blank=True, null=True)
    overridedefensivestat = models.CharField(max_length=50, blank=True, null=True)
    thawstarget = models.BooleanField(blank=True, null=True)
    noppboosts = models.BooleanField(blank=True, null=True)
    sleepusable = models.BooleanField(blank=True, null=True)
    trackstarget = models.BooleanField(blank=True, null=True)
    stealsboosts = models.BooleanField(blank=True, null=True)
    strugglerecoil = models.BooleanField(blank=True, null=True)
    multiaccuracy = models.BooleanField(blank=True, null=True)
    namejp = models.CharField(max_length=50, blank=True, null=True)
    nameko = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        db_table = 'moves'

    def __str__(self):
        return self.name


class Natures(models.Model):
    index = models.CharField(primary_key=True, max_length=50)
    num = models.IntegerField(blank=True, null=True)
    name = models.CharField(max_length=50, blank=True, null=True)
    namejp = models.CharField(max_length=50, blank=True, null=True)
    nameko = models.CharField(max_length=50, blank=True, null=True)
    a = models.FloatField(blank=True, null=True)
    b = models.FloatField(blank=True, null=True)
    c = models.FloatField(blank=True, null=True)
    d = models.FloatField(blank=True, null=True)
    s = models.FloatField(blank=True, null=True)

    class Meta:
        db_table = 'natures'

    def __str__(self):
        return self.name


class Typechart(models.Model):
    index = models.TextField(primary_key=True)
    damagetaken = models.JSONField(blank=True, null=True)
    hpivs = models.JSONField(blank=True, null=True)
    hpdvs = models.JSONField(blank=True, null=True)
    nameko = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        db_table = 'typechart'

    def __str__(self):
        return self.index.capitalize()
